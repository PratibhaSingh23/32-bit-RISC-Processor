module CONTROL_UNIT(OPCode, RegDst, ALUSrc, MemToReg, RegWrite, RdMem, WrMem, Branch, ALUop);
input [5:0] OPCode;
output reg RegDst, ALUSrc, MemToReg, RegWrite, RdMem, WrMem, Branch;
output reg [1:0] ALUop;
always@(OPCode)
casex(OPCode)
6'b000_000 : begin
             RegDst = 1'b1;
             ALUSrc = 1'b0;
             MemToReg = 1'b0;
             RegWrite = 1'b1;
             RdMem = 1'b0;
             WrMem = 1'b0;
             Branch = 1'b0;
             ALUop = 2'b10;
             end
             
6'b100_011 : begin
             RegDst = 1'b0;
             ALUSrc = 1'b1;
             MemToReg = 1'b1;
             RegWrite = 1'b1;
             RdMem = 1'b1;
             WrMem = 1'b0;
             Branch = 1'b0;
             ALUop = 2'b00;
             end
             
6'b101_011 : begin
             RegDst = 1'bx;
             ALUSrc = 1'b1;
             MemToReg = 1'bx;
             RegWrite = 1'b0;
             RdMem = 1'b1;
             WrMem = 1'b0;
             Branch = 1'b0;
             ALUop = 2'b00;
             end
             
6'b000_100 : begin
             RegDst = 1'bx;
             ALUSrc = 1'b0;
             MemToReg = 1'bx;
             RegWrite = 1'b0;
             RdMem = 1'b0;
             WrMem = 1'b0;
             Branch = 1'b1;
             ALUop = 2'b01;
             end
             
6'b000_010 : begin
             RegDst = 1'bx;
             ALUSrc = 1'bx;
             MemToReg = 1'bx;
             RegWrite = 1'b0;
             RdMem = 1'b0;
             WrMem = 1'b0;
             Branch = 1'b0;
             ALUop = 2'bxx;
             end            
endcase
endmodule
